
import pyomo.environ as pe
import pandas as pd
import numpy as np
import random as rand
import matplotlib.pyplot as pt

#Consider 3 annual data
sc_numb = 3
#Yearly total hydrogen demand set as 10kt.
Year_Demand = 10000*1
#period 0 indicates 2030, 1 denotes 2040, 2 represents 2050.
period = 0

#Below parameters are utilized for the sensitivity analysis 
power_cost = 1.0
electrolyzer_cost = 1.0
Battery_cost = 1.0
#We updated the investment cost of DAC facility based on the latest manuscript, published by same authors, Christian Breyer
DAC_discount = 417/237 * 1.0

#Battery scale indicates the 2-h (0), 4-h (1), 6-h (2), 8-h(3)
Battery_scale = 2
#minimum load of PEM EL set as 5%, 40% for heat pump. 
min_W = 0.05
min_HP = 0.4

#For future work, we considered fuel-based electricity and blue hydrogen generation options, not used in this study.
fuel_cost = 1
#Energy consumption parameter of DAC facility, we updated these values based on the latest manuscript, published by same authors, Christian Breyer
e_factor = 250/210
h_factor = 1072/1286
Blue_e = False
H_const = True
#Electrolyzer type: A indicates alkaline EL, W indicates PEMEL
A = False
W = True

#Hourly capacity factor of PV panels and hourly wind speed data.
Renewable_Source =pd.read_excel(r"path.xlsx" )
RS = pd.DataFrame(Renewable_Source)
Solar_CF = RS['CF']
Ws = RS['Ws']
Wind_CF = np.zeros(8760 * 3)
for i in range(8760 * 3):
    ws = Ws[i]
    cf = 0
    if ws < 3:
        cf = 0
    elif ws > 25:
        cf = 0
    elif 3 < ws < 11.4:
        cf = 6.578 * 1e-4 * ws ** 3 - 0.0185706
    else:
        cf = 1
    Wind_CF[i] = cf

WF = np.zeros((8760, sc_numb))
SF = np.zeros((8760, sc_numb))

for i in range(sc_numb):
    #coin_1 = [2,1][i]
    coin_1 = int(i % 3)
    coin_2 = coin_1
    #coin_2 = int(int(i / 3) % 3)
    #coin_1=i
    #coin_2=2-i
    for j in range(8760):
        WF[j][i] = Wind_CF[coin_1 * 8760 + j]
        #SF[j][i] = Solar_CF[coin_1 * 8760 + j]
        SF[j][i] = Solar_CF[coin_2 * 8760 + j]

#Below codes is utilized for considering the influence of number of scenario, considered.
"""
for i in range(sc_numb):
    coin_1=rand.sample([0,1,2],1)[0]
    coin_2=rand.sample([0,1,2],1)[0]
    #coin_1=i
    #coin_2=2-i
    for j in range(8736):
        WF[j][i]=Wind_CF[coin_1*8760+j]
        SF[j][i]=Solar_CF[coin_2*8760+j]
H_demand=np.zeros((52+LT,sc_numb))

for i in range(sc_numb):
    for j in range(8736):
        WF[j][i]=Wind_CF.mean()
        SF[j][i]=Solar_CF.mean()

"""

H_demand = np.zeros((8760, sc_numb))
if H_const == True:
    for i in range(sc_numb):
        for j in range(8760):
            H_demand[j, i] = Year_Demand / 8760



Ti = np.arange(8760)
Wi = np.arange(52)
Sc = np.arange(sc_numb)


num = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.0]
number=8
NT=np.zeros((number,1))
NP=np.zeros((number,1))
NB=np.zeros((number,1))
NB2=np.zeros((number,1))
NW=np.zeros((number,1))
NFC=np.zeros((number,1))
NDAC=np.zeros((number,1))
NHP=np.zeros((number,1))
NTES=np.zeros((number,1))
NHT=np.zeros((number,1))
NC=np.zeros((number,1))
curtail=np.zeros((number,1))
NNGCC = np.zeros((number,1))
A14 = np.zeros((number,1))
A15 = np.zeros((number,1))
A16 = np.zeros((number,1))


DAC1 = np.zeros((8760,1))
DAC2 = np.zeros((8760,1))
DAC3 = np.zeros((8760,1))
DAC4 = np.zeros((8760,1))
Heatpump = np.zeros((8760,1))
TES = np.zeros((8760,1))
TCharge = np.zeros((8760,1))
TDischarge = np.zeros((8760,1))

HTank = np.zeros((8760,1))
PEM = np.zeros((8760,1))
Alkaline = np.zeros((8760,1))
Battery = np.zeros((8760,1))
NGPower = np.zeros((8760,1))
SolarPower = np.zeros((8760,1))
WindPower = np.zeros((8760,1))
Charge = np.zeros((8760,1))
Discharge = np.zeros((8760,1))
PowerOut = np.zeros((8760,1))
Fuelcell = np.zeros((8760,1))
for k in range(number):
    CO2_total = 1000000 * num[k]
    model = pe.ConcreteModel()
    model.XB = pe.Var(bounds=(0, 1e6))
    model.XB2 = pe.Var(bounds=(0, 1e6))
    model.XT = pe.Var(bounds=(0, 1e4))
    T_module = 5
    model.XP = pe.Var(bounds=(0, 1e6))
    if W == True:
        model.XW = pe.Var(bounds=(0, 1e6))
    else:
        model.XW = pe.Var(bounds=(0, 0))

    if A == True:
        model.XA = pe.Var(bounds=(0, 1e6))
    else:
        model.XA = pe.Var(bounds=(0, 0))

    model.XFC = pe.Var(bounds=(0, 1e6))
    model.XHt = pe.Var(bounds=(0, 1e6))
    model.XDAC = pe.Var(bounds=(0, 1e6))
    model.XHP = pe.Var(bounds=(0, 1e6))
    model.XTES = pe.Var(bounds=(0, 1e6))
    if Blue_e == True:
        model.XNGCC = pe.Var(bounds=(0, None))
    else:
        model.XNGCC = pe.Var(bounds=(0, 0))
    module_size = 1
    W_size = 1
    min_A = 0.2
    IC_T = [0.95][period] * power_cost
    IC_P = [0.6][period] * power_cost
    IC_B = [0.19, 0.171, 0.161, 0.1556][Battery_scale] * Battery_cost
    B_max = [0.25, 1 / 6, 0.125, 0.1][Battery_scale]
    IC_W = [0.44][period] * electrolyzer_cost
    IC_Ht = [0.25][period]
    IC_NGCC = 3
    IC_DAC = [315.2062][period] * 8760 / 1e6 * DAC_discount
    min_NGCC = 0.4
    # IC_HP= 2.5125562
    IC_HP = [0.216076][period]
    IC_A = [0.33][period] * electrolyzer_cost
    HP_eff = [3.41][period] * 0.98
    IC_TES = [0.025][period]
    TES_eff = 0.98

    IC_FC = [0.96][period]
    FC_eff = [1/20.4][period]

    B_eff = 0.95 * 0.98
    B_eff2 = 0.95 * 0.95
    T_eff = 0.98
    P_eff = 0.98
    W_eff = 1 / [48][period]
    A_eff = 1 / [50][period]

    model.ESS = pe.Var(Ti, Sc, bounds=(0, None))
    model.ch = pe.Var(Ti, Sc, bounds=(0, None))
    model.dch = pe.Var(Ti, Sc, bounds=(0, None))

    model.ESS2 = pe.Var(Ti, Sc, bounds=(0, None))
    model.ch2 = pe.Var(Ti, Sc, bounds=(0, None))
    model.dch2 = pe.Var(Ti, Sc, bounds=(0, None))
    model.NGCC = pe.Var(Ti, Sc, bounds=(0, None))
    model.YHt = pe.Var(Ti, Sc, bounds=(0, None))
    # model.Hch = pe.Var(Ti, Sc, bounds=(0, None))
    # model.Hdch = pe.Var(Ti, Sc, bounds=(0, None))

    model.YTES = pe.Var(Ti, Sc, bounds=(0, None))
    # model.YHP = pe.Var(Ti, Sc,within=pe.Binary)
    model.Tch = pe.Var(Ti, Sc, bounds=(0, None))
    model.Tdch = pe.Var(Ti, Sc, bounds=(0, None))

    model.out = pe.Var(Ti, Sc, bounds=(0, None))
    model.p2x = pe.Var(Ti, Sc, bounds=(0, None))
    model.a2x = pe.Var(Ti, Sc, bounds=(0, None))
    model.x2p = pe.Var(Ti, Sc, bounds=(0, None))

    model.dac1 = pe.Var(Ti, Sc, bounds=(0, None))
    e1 = [0.07][period] * 2 * e_factor
    model.dac2 = pe.Var(Ti, Sc, bounds=(0, None))
    model.dac3 = pe.Var(Ti, Sc, bounds=(0, None))
    e3 = [0.14][period] * 2 * e_factor
    h3 = [1.286][period] * 2 * h_factor
    model.dac4 = pe.Var(Ti, Sc, bounds=(0, None))

    model.p2t = pe.Var(Ti, Sc, bounds=(0, None))

    model.A2D = pe.Var(Ti, Sc, bounds=(0, 1e6))
    model.D2A = pe.Var(Ti, Sc, bounds=(0, 1e6))
    # def obj_rule(model):
    #    return sum(model.out[i]+1000*(model.sup[i]-model.dem[i]) for i in model.t)
    model.obj = pe.Objective(expr=(
            (0.025 + 0.12950) * (model.XB + model.XB2) * IC_B +
            (0.024 + 0.06505) * IC_T * model.XT * T_module +
            (0.02 + 0.1295) * IC_W * model.XW +
            (0.02 + 0.1295) * IC_A * model.XA +
            (0.02 + 0.06107) * model.XP * IC_P +
            (0.07095 + 0.01) * model.XHt * IC_Ht +
            (0.23097 + 0.02) * model.XFC * IC_FC +
            (0.04 + 0.06505) * model.XDAC * IC_DAC +
            (0.0036 + 0.07095) * model.XHP * IC_HP +
            (0.0002 + 0.06505) * model.XTES * IC_TES+
            (0.03 + 0.08581) * model.XNGCC * IC_NGCC +
            sum(model.NGCC[t, sc] * (7.15 * fuel_cost + 5.6 )*365/364 for t in Ti for sc in Sc ) / sc_numb / 1e6), sense=pe.minimize)


    # (sum (0.05 * model.buy[i,sc] for i in Ti for sc in Sc)
    # Energy balance

    def con_rule_FC(model, t, sc):
        return model.x2p[t, sc] <= model.XFC


    model.con_FC = pe.Constraint(Ti, Sc, rule=con_rule_FC)


    def con_rule_DAC(model, t, sc):
        return model.XDAC == model.dac1[t, sc] + model.dac2[t, sc] + model.dac3[t, sc] + model.dac4[t, sc]


    model.con_rule_DAC = pe.Constraint(Ti, Sc, rule=con_rule_DAC)


    def con_rule_DAC1(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.dac1[t + 1, sc] <= model.dac3[t, sc] + model.dac4[t, sc]


    model.con_rule_DAC1 = pe.Constraint(Ti, Sc, rule=con_rule_DAC1)


    def con_rule_DAC2(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.dac3[t + 1, sc] <= model.dac1[t, sc] + model.dac2[t, sc]


    model.con_rule_DAC2 = pe.Constraint(Ti, Sc, rule=con_rule_DAC2)


    def con_rule_DAC3(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.dac2[t + 1, sc] == model.dac1[t, sc] + model.dac2[t, sc] - model.dac3[t + 1, sc]


    model.con_rule_DAC3 = pe.Constraint(Ti, Sc, rule=con_rule_DAC3)


    def con_rule_DAC4(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.dac4[t + 1, sc] == model.dac3[t, sc] + model.dac4[t, sc] - model.dac1[t + 1, sc]


    model.con_rule_DAC4 = pe.Constraint(Ti, Sc, rule=con_rule_DAC4)
    '''
    def con1f_rule(model, t, sc):
        return model.yA2D[t,sc] <=model.A2D[t,sc]/1e6
    model.con1f = pe.Constraint(Ti, Sc, rule=con1f_rule)

    def con1g_rule(model, t, sc):
        return model.yD2A[t,sc] <=model.D2A[t,sc]/1e6
    model.con1g = pe.Constraint(Ti, Sc, rule=con1g_rule)

    def con1h_rule(model, t, sc):
        return model.yD2A[t,sc] + model.yA2D[t,sc] <= 1
    model.con1h = pe.Constraint(Ti, Sc, rule=con1h_rule)
    '''


    def con131_rule(model, t, sc):
        return model.XNGCC * min_NGCC <= model.NGCC[t, sc]
    model.con131 = pe.Constraint(Ti, Sc, rule=con131_rule)


    def con141_rule(model, t, sc):
        return model.NGCC[t, sc] <= model.XNGCC
    model.con141 = pe.Constraint(Ti, Sc, rule=con141_rule)

    def con1_rule(model, t, sc):
        return SF[t][sc] * model.XP * P_eff + model.dch[t, sc] - model.ch[
            t, sc] + 0.95 * model.A2D[t, sc] - model.D2A[t, sc] - model.p2x[t, sc] - model.a2x[t,sc] + 0.98 * model.x2p[t, sc] == 0
        # return (WF[t][sc]*model.XT*T_eff + SF[t][sc]*model.XP*P_eff)*module_size + model.dch[t,sc] - model.ch[t,sc] - model.out[t,sc] - model.p2x[t,sc] + model.buy[t,sc]==0


    model.con1 = pe.Constraint(Ti, Sc, rule=con1_rule)


    def con1a_rule(model, t, sc):
        return model.NGCC[t,sc] + WF[t][sc] * model.XT * T_eff * T_module + model.dch2[t, sc] - model.ch2[
            t, sc] - model.out[t, sc] + 0.95 * model.D2A[t, sc] - model.A2D[t, sc] - (
                    model.dac1[t, sc] * e1 + model.dac3[t, sc] * e3) - model.p2t[t, sc] == 0
        # return (WF[t][sc]*model.XT*T_eff + SF[t][sc]*model.XP*P_eff)*module_size + model.dch[t,sc] - model.ch[t,sc] - model.out[t,sc] - model.p2x[t,sc] + model.buy[t,sc]==0


    model.con1a = pe.Constraint(Ti, Sc, rule=con1a_rule)
    # model.con1=Constraint(expr = model.power[i]*model.Nt+model.dch[i]-model.ch[i]-model.out[i]-model.sup[i]==0 for i in model.t)

    # End effect of battery, Hs tank, Hk tank considering lead time
    model.end_effect = pe.ConstraintList()

    for sc in Sc:
        model.end_effect.add(
            expr=0.999917 * model.ESS[8759, sc] + B_eff * model.ch[8759, sc] - model.dch[8759, sc] / B_eff >= model.ESS[
                0, sc])
        model.end_effect.add(
            expr=0.999917 * model.ESS2[8759, sc] + B_eff2 * model.ch2[8759, sc] - model.dch2[8759, sc] / B_eff2 >=
                 model.ESS2[
                     0, sc])
        model.end_effect.add(
            expr=0.999896 * model.YHt[8759, sc] + W_eff * model.p2x[8759, sc] + A_eff*model.a2x[8759,sc] - 1 / FC_eff * model.x2p[8759, sc] - H_demand[8759,sc] >=
                 model.YHt[0, sc])
        model.end_effect.add(
            expr=0.995 * model.YTES[8759, sc] + TES_eff * model.Tch[8759, sc] - model.Tdch[8759, sc] / TES_eff >=
                 model.YTES[
                     0, sc])
        model.end_effect.add(
            expr=model.dac3[0, sc] <= model.dac1[8759, sc] + model.dac2[8759, sc])
        model.end_effect.add(
            expr=model.dac1[0, sc] <= model.dac3[8759, sc] + model.dac4[8759, sc])
        model.end_effect.add(
            expr=model.dac2[0, sc] == model.dac1[8759, sc] + model.dac2[8759, sc] - model.dac3[0, sc])
        model.end_effect.add(
            expr=model.dac4[0, sc] == model.dac4[8759, sc] + model.dac3[8759, sc] - model.dac1[0, sc])


    # Component balance equation (ESS, Hs tank, Hk tank) considering lead time
    def con_rule(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.ESS[t + 1, sc] == 0.999917 * model.ESS[t, sc] + B_eff * model.ch[t, sc] - model.dch[
                t, sc] / B_eff


    model.con3 = pe.Constraint(Ti, Sc, rule=con_rule)


    def cona_rule(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.ESS2[t + 1, sc] == 0.999917 * model.ESS2[t, sc] + B_eff2 * model.ch2[t, sc] - model.dch2[
                t, sc] / B_eff2


    model.con3a = pe.Constraint(Ti, Sc, rule=cona_rule)


    def con_rule_He(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.YHt[t + 1, sc] == 0.999896 * model.YHt[t, sc] + model.p2x[t, sc] * W_eff +model.a2x[t,sc] * A_eff - 1 / FC_eff * model.x2p[
                t, sc] - H_demand[t,sc]


    model.con_He = pe.Constraint(Ti, Sc, rule=con_rule_He)


    def con_rule_Te(model, t, sc):
        if t == 8759:
            return pe.Constraint.Skip
            # return 1000*model.Nb*model.SOC[t+1] == 1000*model.Nb*model.SOC[t]+0.9*model.ch[t] - model.dch[t]/0.9
        else:
            return model.YTES[t + 1, sc] == 0.995 * model.YTES[t, sc] + TES_eff * model.Tch[t, sc] - model.Tdch[
                t, sc] / TES_eff


    model.con_Te = pe.Constraint(Ti, Sc, rule=con_rule_Te)


    def con_rule_aHB(model, t, sc):
        return model.dac3[t, sc] * h3 == model.p2t[t, sc] * HP_eff - model.Tch[t, sc] + model.Tdch[t, sc]


    model.con3aH = pe.Constraint(Ti, Sc, rule=con_rule_aHB)


    # operating boundary constraint
    def con7_rule(model, t, sc):
        # return model.dch[t] <= model.Nb*500
        return model.dch[t, sc] <= B_max * model.XB


    model.con7 = pe.Constraint(Ti, Sc, rule=con7_rule)


    def con8_rule(model, t, sc):
        # return model.ch[t] <= model.Nb*500
        return model.ch[t, sc] <= B_max * model.XB


    model.con8 = pe.Constraint(Ti, Sc, rule=con8_rule)


    # operating boundary constraint
    def con7a_rule(model, t, sc):
        # return model.dch[t] <= model.Nb*500
        return model.dch2[t, sc] <= B_max * model.XB2


    model.con7a = pe.Constraint(Ti, Sc, rule=con7a_rule)


    def con8a_rule(model, t, sc):
        # return model.ch[t] <= model.Nb*500
        return model.ch2[t, sc] <= B_max * model.XB2


    model.con8a = pe.Constraint(Ti, Sc, rule=con8a_rule)


    def con9_rule(model, t, sc):
        return model.p2x[t, sc] <= model.XW


    model.con9 = pe.Constraint(Ti, Sc, rule=con9_rule)


    def con10_rule(model, t, sc):
        return min_W * model.XW <= model.p2x[t, sc]


    model.con10 = pe.Constraint(Ti, Sc, rule=con10_rule)

    def con91_rule(model, t, sc):
        return model.a2x[t, sc] <= model.XA


    model.con91 = pe.Constraint(Ti, Sc, rule=con91_rule)


    def con101_rule(model, t, sc):
        return min_A * model.XA <= model.a2x[t, sc]


    model.con101 = pe.Constraint(Ti, Sc, rule=con101_rule)


    def con11_rule(model, t, sc):
        return model.ESS[t, sc] <= model.XB * 0.95


    def con12_rule(model, t, sc):
        return model.XB * 0.15 <= model.ESS[t, sc]


    model.con11 = pe.Constraint(Ti, Sc, rule=con11_rule)
    model.con12 = pe.Constraint(Ti, Sc, rule=con12_rule)


    def con11a_rule(model, t, sc):
        return model.ESS2[t, sc] <= model.XB2 * 0.95


    def con12a_rule(model, t, sc):
        return model.XB2 * 0.15 <= model.ESS2[t, sc]


    model.con11a = pe.Constraint(Ti, Sc, rule=con11a_rule)
    model.con12a = pe.Constraint(Ti, Sc, rule=con12a_rule)




    # def con31_rule(model, t, sc):
    # return model.Hdch[t, sc] <= model.XHt

    # model.con31 = pe.Constraint(Ti, Sc, rule=con31_rule)

    def con41_rule(model, t, sc):
        return model.Tdch[t, sc] <= model.XTES * 0.4


    model.con41 = pe.Constraint(Ti, Sc, rule=con41_rule)
    """
    def con32_rule(model, t, sc):
        return model.Hch[t, sc] <= model.XHt
    model.con32 = pe.Constraint(Ti, Sc, rule=con32_rule)
    def con36_rule(model, t, sc):
        return model.Hch[t, sc] <= model.p2x[t,sc]*W_eff

    model.con36 = pe.Constraint(Ti, Sc, rule=con36_rule)
    """


    def con42_rule(model, t, sc):
        return model.Tch[t, sc] <= model.XTES * 0.4


    model.con42 = pe.Constraint(Ti, Sc, rule=con42_rule)


    def con33_rule(model, t, sc):
        return model.YHt[t, sc] <= model.XHt


    model.con33 = pe.Constraint(Ti, Sc, rule=con33_rule)


    def con43_rule(model, t, sc):
        return model.YTES[t, sc] <= model.XTES * 0.8


    model.con43 = pe.Constraint(Ti, Sc, rule=con43_rule)
    """
    def con51_rule(model, t, sc):
        return model.p2c[t, sc] <= model.XDAC


    model.con51 = pe.Constraint(Ti, Sc, rule=con51_rule)
    """


    def con52_rule(model, t, sc):
        return model.p2t[t, sc] <= model.XHP


    model.con52 = pe.Constraint(Ti, Sc, rule=con52_rule)


    def con53_rule(model, t, sc):
        return model.XHP * min_HP <= model.p2t[t, sc]


    model.con53 = pe.Constraint(Ti, Sc, rule=con53_rule)


    def con61_rule(model, sc):
        return sum(model.dac3[t, sc] * 2 - model.NGCC[t, sc] * 0.038 for t in Ti) >= CO2_total
    model.con61 = pe.Constraint(Sc, rule=con61_rule)

    solver = pe.SolverFactory('cplex', executetable=r'path\CPLEX Optimization Studio 22.1.1\CP Optimizer Interactive.exe')
#Set mip gap (optimaility gap) as 0.1%
    solver.options['mipgap'] = 0.001
#Set timelimit of solver as 10 days (prevent infinity running)
    solver.options['timelimit'] = 3600 * 24* 10
    result = solver.solve(model, tee=False)
    NT[k] = model.XT() * T_module
    NP[k] =  model.XP()
    NB[k] = model.XB()
    NB2[k] = model.XB2()
    NW[k] = model.XW()
    NFC[k] = model.XFC()
    NDAC[k] =  model.XDAC() * 8760 / 1000000
    NHP[k] =  model.XHP() * 3.41
    NTES[k] = model.XTES()
    NHT[k] = model.XHt() / 1000
    NC[k] = model.obj()
    NNGCC[k] = model.XNGCC()
    curtail[k] = sum(model.out[t,sc]() for t in Ti for sc in Sc) / sum(WF[t][sc] * model.XT() * T_eff * T_module + SF[t][sc] * model.XP() * P_eff for sc in Sc for t in Ti)
    total_e = sum(model.p2x[t, sc]() + model.a2x[t, sc]() + 0.07*2 * model.dac1[t,sc]() + 0.14*2  * model.dac3[t,sc]() + model.p2t[t,sc]()  for t in Ti for sc in Sc) / sc_numb
    e1 = sum(model.NGCC[t, sc]() for t in Ti for sc in Sc) / sc_numb
    e3 = sum(model.ESS[t, sc]() * (1 - 0.999917) for t in Ti for sc in Sc) / sc_numb
    e4 = total_e - e1 + e3

    A14[k] = e1 / (total_e + e3)
    A15[k] = sum(model.NGCC[t, sc]() * 7.15 *365/364 for t in Ti for sc in Sc )/1e6/sc_numb
    A16[k] = model.XA()
    print('number', num[k], 'total cost', model.obj())
    print('Turbine', model.XT() * T_module, 'Solar', model.XP(), 'Battery', model.XB(), 'battery2', model.XB2(), 'PEM',
          model.XW(),
          'Fuel Cell', model.XFC(), 'DAC', model.XDAC() * 8760 / 1000000, 'Heat Pump', model.XHP() * 3.41, 'TES',
          model.XTES(), 'H tank', model.XHt() / 1000)
    print('curtailment', curtail[k])
    for idx in range(8760):
        DAC1[idx] = model.dac1[idx,0]()
        DAC2[idx] = model.dac2[idx,0]()
        DAC3[idx] = model.dac3[idx,0]()
        DAC4[idx] = model.dac4[idx,0]()
        Heatpump[idx] = model.p2t[idx,0]()
        TES[idx] = model.YTES[idx, 0]()
        TCharge[idx] = model.Tch[idx, 0]()
        TDischarge[idx] = model.Tdch[idx, 0]()
        HTank[idx] = model.YHt[idx,0]()
        PEM[idx] = model.p2x[idx,0]()

        Alkaline[idx] = model.a2x[idx,0]()
        Battery[idx] = model.ESS[idx,0]() + model.ESS2[idx,0]()

        Charge[idx] = model.ch[idx,0]() + model.ch2[idx,0]()
        Discharge[idx] = model.dch[idx, 0]() + model.dch2[idx, 0]()
        #NGPower[idx] = np.zeros((Ti, 1))
        SolarPower[idx] = SF[idx][0] * model.XP() * P_eff
        WindPower[idx] = model.XT() * WF[idx][0]  * T_eff * T_module
        PowerOut[idx] = model.out[idx,0]()
        Fuelcell[idx] = model.x2p[idx,0]()
	#Check the constraints satisfaction
        # return (WF[t][sc]*model.XT*T_eff + SF[t][sc]*model.XP*P_eff)*module_size + model.dch[t,sc] - model.ch[t,sc] - model.out[t,sc] - model.p2x[t,sc] + model.buy[t,sc]==0

# pt.subplots((2,2),Wi, model.YHt[:,7]()
"""
print('TIC', (0.1295 * IC_B * model.XB() + 0.0802*IC_T * model.XT() + 0.065*model.XP() * IC_P
                         + 0.1295 * IC_W * model.XW() * W_size / module_size) * module_size**0.9
                         + (0.065+0.01)  * (model.XHs() * IC_Hs + model.XHk() * IC_Hk) * tank_size + 0.065 * model.XS() * IC_S,
      'O&M',0.01 * model.XB() * module_size  +IC_T * model.XT() * 0.024 * module_size + IC_W * model.XW() * 0.02 * W_size + 0.01*model.XP() * IC_P* module_size)
H_total = 0

for i in range(sc_numb):
    for j in range(52+LT):
        H_total = H_total + H_demand[j, i] / sc_numb
print('H_total', H_total, 'LCOH', model.obj()/H_total*1000)
print('NT', model.XT(), 'NP', model.XP(), 'NW', model.XW(), 'NB', model.XB(), 'NS', model.XS(), 'NHk', model.XHk(), 'NHs', model.XHs())
"""

a1 = NT.flatten().tolist()
a2 = NP.flatten().tolist()
a3 = NB.flatten().tolist()
a4 = NB2.flatten().tolist()
a5 = NW.flatten().tolist()
a6 = NFC.flatten().tolist()
a7 = NDAC.flatten().tolist()
a8 = NHP.flatten().tolist()
a9 = NTES.flatten().tolist()
a10 = NHT.flatten().tolist()
a11 = NC.flatten().tolist()
a12 = curtail.flatten().tolist()
a13 = NNGCC.flatten().tolist()
a14 = A14.flatten().tolist()
a15 = A15.flatten().tolist()
a16 = A16.flatten().tolist()
data_array = np.array([a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11, a12, a13, a14, a15, a16])

# Convert the NumPy array to a Pandas DataFrame
df = pd.DataFrame({
    'Turbine': a1,
    'PV': a2,
    'Battery': a3,
    'Battery 2': a4,
    'W': a5,
    'FC': a6,
    'DAC': a7,
    'HP': a8,
    'TES': a9,
    'HT': a10,
    'NGCC': a13,
    'Cost': a11,
    'curtail': a12,
'low C ratio': a14,
    'NG': a15,
    'Alkaline': a16
})


b1 = DAC1.flatten().tolist()
b2 = DAC2.flatten().tolist()
b3 = DAC3.flatten().tolist()
b4 = DAC4.flatten().tolist()
b5 = Heatpump.flatten().tolist()
b6 = TES.flatten().tolist()
b7 = TCharge.flatten().tolist()
b8 = TDischarge.flatten().tolist()

b9 = HTank.flatten().tolist()
b10 = PEM.flatten().tolist()
b11 = Alkaline.flatten().tolist()
b12 = Battery.flatten().tolist()
b13 = NGPower.flatten().tolist()
b14 = SolarPower.flatten().tolist()
b15 = WindPower.flatten().tolist()
b16 = Charge.flatten().tolist()
b17 = Discharge.flatten().tolist()
b18 = PowerOut.flatten().tolist()
b19 = Fuelcell.flatten().tolist()
data_array2 = np.array([b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11, b12, b13, b14, b15, b16, b17, b18])

# Convert the NumPy array to a Pandas DataFrame
df2 = pd.DataFrame({
    'DAC1': b1,
    'DAC2': b2,
    'DAC3': b3,
    'DAC4': b4,
    'Heatpump': b5,
    'TES': b6,
    'TCharge': b7,
    'TDischarge': b8,
    'HTank': b9,
    'PEM': b10,
    'Alkaline': b11,
    'Battery': b12,
    'NGPower': b13,
'SolarPower': b14,
    'WindPower': b15,
    'Charge': b16,
    'Discharge': b17,
    'Curtailment': b18,
    'Fuel Cell': b19
})


# export the results to a excel
df.to_excel(r'path\design.xlsx', index=False, engine='openpyxl')
df2.to_excel(r'path\operation.xlsx', index=False, engine='openpyxl')

